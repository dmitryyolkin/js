#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../zooServerApp');
var debug = require('debug')('server:server');

var http = require('http');
var https = require('https');
var fs = require('fs');

var HTTP_PORT = normalizePort(process.env.PORT || 3000); //usually it's 80 but it requires requires elevated privileges for non root applications
var HTTPS_PORT = normalizePort(process.env.PORT || 4000); //usually it's 443 but it requires requires elevated privileges for non root applications

app.set('port', HTTP_PORT);
app.set('sslport', HTTPS_PORT);

//redirect from http to https
//todo this middleware redict function is not invoked - check it
app.all('/*', function (req, res, next) {
    if (/^http$/.test(req.protocol)) {
        var host = req.headers.host.replace(/:[0-9]+$/g, ""); // strip the port # if any
        if ((HTTPS_PORT != null) && HTTPS_PORT !== 443) {
            return res.redirect("https://" + host + ":" + HTTPS_PORT + req.url, 301);
        } else {
            return res.redirect("https://" + host + req.url, 301);
        }
    } else {
        return next();
    }
});

/**
 * Create HTTP server.
 */

var httpServer = http.createServer(app);
var httpsServer = https.createServer(
    {
        key: fs.readFileSync('key.pem'),
        cert: fs.readFileSync('cert.pem')
    },
    app
);

configureServer(httpServer, HTTP_PORT, onHttpError, onHttpListening);
configureServer(httpsServer, HTTPS_PORT, onHttpsError, onHttpsListening);

function configureServer(server, port, errorHandler, listenHandler) {
    /**
     * Listen on provided port, on all network interfaces.
     */

    server.listen(port);
    server.on('error', errorHandler);
    server.on('listening', listenHandler);
}

function onHttpError(error) {
    return onError(error, HTTP_PORT);
}

function onHttpsError(error) {
    return onError(error, HTTPS_PORT);
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error, port) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
    case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
    case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
    default:
        throw error;
    }
}

function onHttpListening() {
    return onListening(httpServer);
}

function onHttpsListening() {
    return onListening(httpsServer);
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening(server) {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}
